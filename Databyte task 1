#implementation using tensorflow only
import pandas as pd    #this is for data analysis and data exploration
import numpy as np     #this is for linear algebra and data manipulation
import tensorflow as tf    #this is for numerical computation and building machine learning models.
from sklearn.preprocessing import StandardScaler

# Load the training dataset from Excel file
train = pd.read_excel('/kaggle/input/fare-prices/Fare_ pred/Train_fare.xlsx')

# Load the testing dataset from Excel file
test = pd.read_excel('/kaggle/input/fare-prices/Fare_ pred/test_fare.xlsx')

# Preprocessing: Extract features and target variable
#for training dataset
X_train = train[['trip_duration', 'distance_travelled', 'num_of_people']]
y_train = train['total_fare']
#for test data set
X_test = test_data[['trip_duration', 'distance_travelled', 'num_of_people']]
y_test = test_data['total_fare']

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Create a TensorFlow model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(32, activation='relu', input_shape=(X_train_scaled.shape[1],)),
    tf.keras.layers.Dense(16, activation='relu'),
    tf.keras.layers.Dense(1)
])

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train_scaled, y_train, epochs=100, batch_size=32, verbose=0)

# Evaluate the model
loss = model.evaluate(X_test_scaled, y_test)
print('Mean Squared Error:', loss)







#implementation using pytroch only
import pandas as pd
import numpy as np
import torch   #Another library for machine and deep learning. Very efficient if you want to build neural networks.
import torch.nn as nn
import torch.optim as optim
from sklearn.preprocessing import StandardScaler

# Load the training dataset from Excel file
train = pd.read_excel('/kaggle/input/fare-prices/Fare_ pred/Train_fare.xlsx')

# Load the testing dataset from Excel file
test = pd.read_excel('/kaggle/input/fare-prices/Fare_ pred/test_fare.xlsx')

# Preprocessing: Extract features and target variable
X_train = train[['trip_duration', 'distance_travelled', 'num_of_people']]
y_train = train['total_fare']

X_test = test[['trip_duration', 'distance_travelled', 'num_of_people']]
y_test = test['total_fare']

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Convert data to PyTorch tensors
X_train_tensor = torch.Tensor(X_train_scaled)
X_test_tensor = torch.Tensor(X_test_scaled)
y_train_tensor = torch.Tensor(y_train.values)
y_test_tensor = torch.Tensor(y_test.values)

# Define the PyTorch model
class RegressionModel(nn.Module):
    def __init__(self, input_size):
        super(RegressionModel, self).__init__()
        self.fc1 = nn.Linear(input_size, 32)
        self.fc2 = nn.Linear(32, 16)
        self.fc3 = nn.Linear(16, 1)

    def forward(self, x):
        x = nn.functional.relu(self.fc1(x))
        x = nn.functional.relu(self.fc2(x))
        x = self.fc3(x)
        return x

# Create an instance of the model
model = RegressionModel(X_train_tensor.shape[1])

# Define the loss function and optimizer
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Train the model
num_epochs = 100
batch_size = 32
for epoch in range(num_epochs):
    for i in range(0, len(X_train_tensor), batch_size):
        batch_X = X_train_tensor[i:i+batch_size]
        batch_y = y_train_tensor[i:i+batch_size]

        optimizer.zero_grad()
        outputs = model(batch_X)
        loss = criterion(outputs, batch_y)
        loss.backward()
        optimizer.step()

# Evaluate the model
with torch.no_grad():
    test_outputs = model(X_test_tensor)
    test_loss = criterion(test_outputs, y_test_tensor)
    print('Mean Squared Error:', test_loss.item())  # this gives us the mean squared error which is given by the square of the difference divided by the total number present
#Thus we have the solution for executing it using two different libraries.
